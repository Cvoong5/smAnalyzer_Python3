Flow of the code:
    (1) Reading the file sum images
        - read_data(file)
            - file: Directory to file or file name; include extension
            - output: movie and summed image
    (2) Applying offset if applicable
        - shift_images(image, angle, y_offset, x_offset)
            - image: input summed image generated from read_data()
            - angle: rotate image by angle
            - y_offset: move an image along the y-axis
            - x_offset: move an image along the x-axis
            - output: shifted_image
        - Need to develop this function
    (3) Identify spots
        - spot_finder(image, threshold, dist_limit, background_subtract = True, window = 3):
            - image: input summed image generated from read_data()
            - threshold: float, sets the minimum threshold intensity for what is considered as a spot
            - dist_limit: float, sets the minimum distance two spots needs to be from each other to be considered
            - background_subtract: if True identify the minimum intensity value within the window parameter and perform a background subtract followed by local maxima detection     
            - window: integer, if background_subtract == True, sets the box size to consider when calculating the background for background subtraction
            - output: coordinates
    (4) Assess colocalization
        - Need to develop this function
    (5) Extract intensity traces and fit intensity traces
        - extract_intensity(movie, coordinates, window,fit_intensity = False, pick_spots = False, save = False):
            - movie: movie generated from read_data()
            - coordinates: coordinates generated from spot_finder() 
            - window: integer, window size to calculate spot and background intensity
            - fit_intensity: if True; intensity values will be fitted, if False intensity values will not be fitted
            - pick_spots: if True; user will manually save spots. if False; all spots will be saved
            - save: if True; write csv file containing the spot intensity and background intensity at that particular coordinates
            - output: saved coordinates and intensity data
        - fit_intensity(intensity_package, segment, exposure, save = False):
            - intensity_package: data generated from extract_intensity()
            - segment: integer, moving_window to for change point detection
            - exposure: float, exposure used in collecting the movie
            - save: if True; write csv file containing the spot intensity and fit intensity at that particular coordinates
            - output: None 
    (6) Pick and reject spots
        - Need to develop this function
    (7) Option to adjust parameters:
        - Need to develop prompts to adjust:
            - Fitting parameters
            - Image brightness 

Currently working on...
    - extract_intensity(); line 73
        - fit_intensity(); line 79
        - Test if this function works


Thought process:
    - If there is an inflection point, you want to be able to detect it. One way you can detect the these inflection points is by using statistics
        - The simple statistical variables are mean, median, mode, standard deviation, variance, minimum, and maximum.
    - If we were to design a low cost point detection algorithm:
        - We can measure the change in mean values and the change in standard deviation.
        - For example, if the intensity value increases, the mean and standard deviation will also increase.
            - if the intensity decreases, the mean will decrease and the standard deviation will increase.
    - Another simple way to optimize the fitting parameters is to impose a penalty
    
    - In an ideal world scenario:
        - The standard deviation between rolling values without change will be 0 and anything that changes will be greater than 0
        - The mean difference will remain 0 until it reaches an inflection point, in which it will either be greater than 0 or less than 0
        - Designing a change point detection for these assumptions is as follows:
            - If standard deviation and mean difference is not equal to 0:
                - Append index of inflection point
            - Else
                - Move on
    
    - In an experimental setting:
        - There is noise in the data, so the standard deviation of the moving window will be greater than 0 while the mean and mean difference will fluctuate between - and + values.
        - A key point here is that the fluctuations between the standard deviations should be small relative to an inflection point. 
        - The absolute mean change at an inflection point will be greater than the mean change between non changing values.

        - So the development of this change point detection relies on the following factors:
            - The average standard deviation of the noise between a relatively small window size
            - The average mean difference between non changing values
            - Comparing the standard deviation of the moving window to that of the noise 
            - Comparing the absolute mean difference to the average mean difference between non changing values
        
        (1) Read the mean and standard deviation of the entire data set
            - The mean will represent an overestimate of the noise for the entire dataset containing inflection points
            - The standard deviation represents the stability of the enetire data set
        (2) Using a moving window:
            (1) Measure the mean and standard deviation: 
                - This will represent the noise and stability of this segment
            (2) Remove points that drastically alters the mean and standard deviation using a threshold based on the mean and standard deviation of (1)
        (3) Take the Mean of the mean and mean of the standard deviation:
            - This will serve as a threshold for your point change detection
        (4) Using a moving window:
            - Take the mean and standard deviation
            - Assess if mean and standard deviation within the window exceeds the threshold parameters
            - If it does, append the index where the values exist 

    - Code logic:
        - Take mean of data
        - Take std of data

        - For every window size within the data set:
            - Take the mean and standard deviation
            - If the mean and standard deviation does not exceed the threshold:
                - Save these mean and standard deviation

        - Take the mean of the mean values and standard deviation

        -for every window size within the data set:
            - Take the mean and standard deviation
            - Take the absolute difference of the mean
                - if the standard deviation is greater than the threshold:
                    - Check if the larger absolute mean between the two is greater than the mean threshold
                        - if it meets this requirement, save the index as an inflection point 
mean_data = np.mean(data)
std_data = np.std(data)

mean_list = []
std_list = []
for i in range(0 , len(data) - window, window):
    mean_window = np.mean(data[i: i + window])
    std_window = np.std(data[i: i + window])
    if mean_window < x*mean_data and std_window < y*std_list:
        mean_list.append(mean_window)
        std_list.append(std_window)
mean_threshold = int(np.mean(mean_list))
std_threshold = int(np.mean(std_list))

change_points = []
for i in range(len(data) - window, window):
    values = data[i: i + window]
    std_val = np.std(values)
    mean_val = np.mean(values)
    if mean_val > x*mean_threshold and std_val >y*std_threshold:
        change_points.append(i) 

fit = np.zeros_like(data)
for i in range(len(change_points) - 1):
    range1 = change_points[i]
    range2 = change_points[i + 1]
    fit[range1:range2] = int(np.mean(data[range1:range2]))
    

    
